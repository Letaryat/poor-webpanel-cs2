generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("SIMPLEADMIN_DATABASE")
}

model sa_admins {
  id              Int               @id @default(autoincrement())
  player_name     String?           @db.VarChar(128)
  player_steamid  String            @db.VarChar(64)
  flags           String?           @db.Text
  immunity        Int               @default(0)
  server_id       Int?
  ends            DateTime?         @db.Timestamp(0)
  created         DateTime          @default(now()) @db.Timestamp(0)
  group_id        Int?
  sa_groups       sa_groups?        @relation(fields: [group_id], references: [id], onUpdate: Restrict, map: "sa_admins_ibfk_1")
  sa_admins_flags sa_admins_flags[]
  sa_unbans       sa_unbans[]
  sa_unmutes      sa_unmutes[]

  @@index([group_id], map: "group_id")
}

model sa_admins_flags {
  id        Int       @id @default(autoincrement())
  admin_id  Int
  flag      String    @db.VarChar(64)
  sa_admins sa_admins @relation(fields: [admin_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "sa_admins_flags_ibfk_1")

  @@index([admin_id], map: "admin_id")
}

model sa_bans {
  id             Int            @id @default(autoincrement())
  player_name    String?        @db.VarChar(128)
  player_steamid String?        @db.VarChar(64)
  player_ip      String?        @db.VarChar(128)
  admin_steamid  String         @db.VarChar(64)
  admin_name     String         @db.VarChar(128)
  reason         String         @db.VarChar(255)
  duration       Int
  ends           DateTime?      @db.Timestamp(0)
  created        DateTime       @default(now()) @db.Timestamp(0)
  server_id      Int?
  unban_id       Int?
  status         sa_bans_status @default(ACTIVE)
  sa_unbans      sa_unbans?     @relation(fields: [unban_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "sa_bans_ibfk_1")

  @@index([unban_id], map: "unban_id")
}

model sa_groups {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(255)
  immunity          Int                 @default(0)
  sa_admins         sa_admins[]
  sa_groups_flags   sa_groups_flags[]
  sa_groups_servers sa_groups_servers[]
}

model sa_groups_flags {
  id        Int       @id @default(autoincrement())
  group_id  Int
  flag      String    @db.VarChar(64)
  sa_groups sa_groups @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "sa_groups_flags_ibfk_1")

  @@index([group_id], map: "group_id")
}

model sa_groups_servers {
  id        Int       @id @default(autoincrement())
  group_id  Int
  server_id Int?
  sa_groups sa_groups @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "sa_groups_servers_ibfk_1")

  @@index([group_id], map: "group_id")
}

model sa_migrations {
  id      Int    @id @default(autoincrement())
  version String @db.VarChar(255)
}

model sa_mutes {
  id             Int             @id @default(autoincrement())
  player_name    String?         @db.VarChar(128)
  player_steamid String          @db.VarChar(64)
  admin_steamid  String          @db.VarChar(64)
  admin_name     String          @db.VarChar(128)
  reason         String          @db.VarChar(255)
  duration       Int
  passed         Int?
  ends           DateTime?       @db.Timestamp(0)
  created        DateTime        @default(now()) @db.Timestamp(0)
  type           sa_mutes_type   @default(GAG)
  server_id      Int?
  unmute_id      Int?
  status         sa_mutes_status @default(ACTIVE)
  sa_unmutes     sa_unmutes?     @relation(fields: [unmute_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "sa_mutes_ibfk_1")

  @@index([unmute_id], map: "unmute_id")
}

model sa_players_ips {
  id      Int      @id @default(autoincrement())
  steamid BigInt
  address String   @db.VarChar(64)
  used_at DateTime @default(now()) @db.Timestamp(0)

  @@unique([steamid, address], map: "steamid")
}

model sa_servers {
  id            Int     @id @default(autoincrement())
  hostname      String? @db.VarChar(128)
  rcon_password String? @db.VarChar(128)
  address       String  @unique(map: "address") @db.VarChar(64)
}

model sa_unbans {
  id        Int       @id @default(autoincrement())
  ban_id    Int
  admin_id  Int       @default(0)
  reason    String    @default("Unknown") @db.VarChar(255)
  date      DateTime  @default(now()) @db.Timestamp(0)
  sa_bans   sa_bans[]
  sa_admins sa_admins @relation(fields: [admin_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "sa_unbans_ibfk_1")

  @@index([admin_id], map: "admin_id")
}

model sa_unmutes {
  id        Int        @id @default(autoincrement())
  mute_id   Int
  admin_id  Int        @default(0)
  reason    String     @default("Unknown") @db.VarChar(255)
  date      DateTime   @default(now()) @db.Timestamp(0)
  sa_mutes  sa_mutes[]
  sa_admins sa_admins  @relation(fields: [admin_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "sa_unmutes_ibfk_1")

  @@index([admin_id], map: "admin_id")
}

model sa_warns {
  id             Int             @id @default(autoincrement())
  player_name    String?         @db.VarChar(128)
  player_steamid String          @db.VarChar(64)
  admin_steamid  String          @db.VarChar(64)
  admin_name     String          @db.VarChar(128)
  reason         String          @db.VarChar(255)
  duration       Int
  ends           DateTime        @default(now()) @db.Timestamp(0)
  created        DateTime        @default(now()) @db.Timestamp(0)
  server_id      Int?
  status         sa_warns_status @default(ACTIVE)
}

enum sa_mutes_type {
  GAG
  MUTE
  SILENCE
  EMPTY_ENUM_VALUE @map("")
}

enum sa_warns_status {
  ACTIVE
  EXPIRED
  EMPTY_ENUM_VALUE @map("")
}

enum sa_bans_status {
  ACTIVE
  UNBANNED
  EXPIRED
  EMPTY_ENUM_VALUE @map("")
}

enum sa_mutes_status {
  ACTIVE
  UNMUTED
  EXPIRED
  EMPTY_ENUM_VALUE @map("")
}
